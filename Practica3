{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNxUK0HPwgQw4KMczAj/Uj/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/fabianteo2004-ops/Promgramacion-avanzada/blob/main/Practica3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "id": "ZdoJGUGHC3bD",
        "outputId": "198ab884-013f-4b35-f63c-e45bde494c1f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- MENÚ ---\n",
            "1. Introducir una nueva hora\n",
            "2. Ver hora actual\n",
            "3. Crear hora desde una cadena\n",
            "4. Salir\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-361125160.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    262\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    263\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 264\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    265\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/tmp/ipython-input-361125160.py\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"4. Salir\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    214\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 215\u001b[0;31m         \u001b[0mopcion\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Elige una opción (1-4): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    216\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mopcion\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"1\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1175\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1176\u001b[0m             )\n\u001b[0;32m-> 1177\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1178\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"shell\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1218\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1219\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1220\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ],
      "source": [
        "# time_management.py\n",
        "import re\n",
        "\n",
        "\n",
        "class Time:\n",
        "    \"\"\"\n",
        "    Clase que representa una hora en formato de 24 horas o en formato AM/PM.\n",
        "    También lleva un contador de cuántos objetos Time se han creado.\n",
        "    \"\"\"\n",
        "\n",
        "    TIME_FORMATS = (\"AM\", \"PM\", \"24 HOURS\")\n",
        "    time_count = 0\n",
        "\n",
        "    def __init__(self, hours=0, minutes=0, seconds=0, pszFormat=\"24 HOURS\"):\n",
        "        \"\"\"\n",
        "        Constructor de la clase.\n",
        "        Si los valores dados no son válidos, se inicializa en 00:00:00 (24 HOURS).\n",
        "        \"\"\"\n",
        "        self.hours = 0\n",
        "        self.minutes = 0\n",
        "        self.seconds = 0\n",
        "        self.format = \"24 HOURS\"\n",
        "\n",
        "        if not self.set_time(hours, minutes, seconds, pszFormat):\n",
        "            # Si algo falla, se deja en la hora por defecto\n",
        "            pass\n",
        "\n",
        "        Time.time_count += 1\n",
        "\n",
        "    def __asign_format(self, pszFormat):\n",
        "        \"\"\"\n",
        "        Comprueba y asigna el formato de hora (AM, PM o 24 HOURS).\n",
        "        Retorna True si el formato es correcto, False si no lo es.\n",
        "        \"\"\"\n",
        "        if pszFormat is None:\n",
        "            return False\n",
        "\n",
        "        fmt = pszFormat.strip().upper()\n",
        "        if fmt in (\"24H\", \"24HOURS\"):\n",
        "            fmt = \"24 HOURS\"\n",
        "\n",
        "        if fmt in Time.TIME_FORMATS:\n",
        "            self.format = fmt\n",
        "            return True\n",
        "        return False\n",
        "\n",
        "    def __is_24hour_format(self):\n",
        "        \"\"\"\n",
        "        Indica si el formato actual es de 24 horas.\n",
        "        \"\"\"\n",
        "        return self.format == \"24 HOURS\"\n",
        "\n",
        "    def _is_valid_time(self):\n",
        "        \"\"\"\n",
        "        Verifica si la hora, minutos y segundos son válidos\n",
        "        según el formato actual.\n",
        "        \"\"\"\n",
        "        if not (0 <= self.minutes <= 59 and 0 <= self.seconds <= 59):\n",
        "            return False\n",
        "\n",
        "        if self.__is_24hour_format():\n",
        "            return 0 <= self.hours <= 23\n",
        "        else:\n",
        "            return 1 <= self.hours <= 12\n",
        "\n",
        "    def set_time(self, nHoras, nMinutos, nSegundos, pszFormato):\n",
        "        \"\"\"\n",
        "        Asigna una nueva hora al objeto, comprobando que sea válida.\n",
        "        Devuelve True si se asigna correctamente, False si hay algún error.\n",
        "        \"\"\"\n",
        "        try:\n",
        "            h = int(nHoras)\n",
        "            m = int(nMinutos)\n",
        "            s = int(nSegundos)\n",
        "        except (TypeError, ValueError):\n",
        "            return False\n",
        "\n",
        "        old_hours, old_minutes, old_seconds, old_format = (\n",
        "            getattr(self, \"hours\", 0),\n",
        "            getattr(self, \"minutes\", 0),\n",
        "            getattr(self, \"seconds\", 0),\n",
        "            getattr(self, \"format\", \"24 HOURS\"),\n",
        "        )\n",
        "\n",
        "        if not self.__asign_format(str(pszFormato)):\n",
        "            self.format = old_format\n",
        "            return False\n",
        "\n",
        "        self.hours = h\n",
        "        self.minutes = m\n",
        "        self.seconds = s\n",
        "\n",
        "        if not self._is_valid_time():\n",
        "            # Si la hora no es válida, se restauran los valores anteriores\n",
        "            self.hours = old_hours\n",
        "            self.minutes = old_minutes\n",
        "            self.seconds = old_seconds\n",
        "            self.format = old_format\n",
        "            return False\n",
        "\n",
        "        return True\n",
        "\n",
        "    def get_time(self):\n",
        "        \"\"\"\n",
        "        Devuelve la hora actual del objeto en forma de tupla:\n",
        "        (horas, minutos, segundos, formato)\n",
        "        \"\"\"\n",
        "        return (self.hours, self.minutes, self.seconds, self.format)\n",
        "\n",
        "    @classmethod\n",
        "    def from_string(cls, time_string):\n",
        "        \"\"\"\n",
        "        Crea un objeto Time a partir de una cadena con el formato:\n",
        "        \"HH:MM:SS FORMAT\" o simplemente \"HH:MM:SS\".\n",
        "\n",
        "        Ejemplo:\n",
        "            \"14:30:00 24 HOURS\"\n",
        "            \"02:45:30 PM\"\n",
        "            \"08:00:00\"\n",
        "        \"\"\"\n",
        "        if not isinstance(time_string, str):\n",
        "            print(\"Entrada no válida: debe ser una cadena.\")\n",
        "            return None\n",
        "\n",
        "        patron = r'^\\s*(\\d{1,2}):(\\d{2}):(\\d{2})(?:\\s+(.+))?\\s*$'\n",
        "        m = re.match(patron, time_string)\n",
        "        if not m:\n",
        "            print(\"Formato inválido. Use 'HH:MM:SS FORMAT' o 'HH:MM:SS'.\")\n",
        "            return None\n",
        "\n",
        "        hours_s, mins_s, secs_s, fmt_s = m.group(1), m.group(2), m.group(3), m.group(4)\n",
        "        if fmt_s is None:\n",
        "            fmt_s = \"24 HOURS\"\n",
        "\n",
        "        try:\n",
        "            hours = int(hours_s)\n",
        "            minutes = int(mins_s)\n",
        "            seconds = int(secs_s)\n",
        "        except ValueError:\n",
        "            print(\"Los valores de hora, minuto o segundo no son numéricos.\")\n",
        "            return None\n",
        "\n",
        "        obj = cls()\n",
        "        if not obj.set_time(hours, minutes, seconds, fmt_s):\n",
        "            print(\"La hora de la cadena no es válida para el formato indicado.\")\n",
        "            return None\n",
        "\n",
        "        return obj\n",
        "\n",
        "    @staticmethod\n",
        "    def is_valid_format(time_format):\n",
        "        \"\"\"\n",
        "        Comprueba si el formato de hora dado es válido (AM, PM o 24 HOURS).\n",
        "        \"\"\"\n",
        "        if time_format is None:\n",
        "            return False\n",
        "        fmt = str(time_format).strip().upper()\n",
        "        if fmt in (\"24H\", \"24HOURS\"):\n",
        "            fmt = \"24 HOURS\"\n",
        "        return fmt in Time.TIME_FORMATS\n",
        "\n",
        "    @classmethod\n",
        "    def get_time_count(cls):\n",
        "        \"\"\"\n",
        "        Devuelve cuántos objetos Time se han creado en total.\n",
        "        \"\"\"\n",
        "        return cls.time_count\n",
        "\n",
        "\n",
        "def format_time_string(time_obj):\n",
        "    \"\"\"\n",
        "    Devuelve la hora del objeto Time en formato legible:\n",
        "    'HH:MM:SS FORMAT'\n",
        "    \"\"\"\n",
        "    if not isinstance(time_obj, Time):\n",
        "        raise TypeError(\"format_time_string: se esperaba un objeto Time.\")\n",
        "    h, m, s, fmt = time_obj.get_time()\n",
        "    return f\"{h:02d}:{m:02d}:{s:02d} {fmt}\"\n",
        "\n",
        "\n",
        "def input_int(prompt, min_value=None, max_value=None):\n",
        "    \"\"\"\n",
        "    Pide al usuario un número entero y valida que esté dentro del rango.\n",
        "    Si la entrada no es válida, lanza un ValueError.\n",
        "    \"\"\"\n",
        "    val = input(prompt).strip()\n",
        "    if val == \"\":\n",
        "        raise ValueError(\"Entrada vacía.\")\n",
        "    n = int(val)\n",
        "    if min_value is not None and n < min_value:\n",
        "        raise ValueError(f\"El valor no puede ser menor que {min_value}.\")\n",
        "    if max_value is not None and n > max_value:\n",
        "        raise ValueError(f\"El valor no puede ser mayor que {max_value}.\")\n",
        "    return n\n",
        "\n",
        "\n",
        "def main():\n",
        "    \"\"\"\n",
        "    Muestra un menú sencillo para crear y mostrar horas.\n",
        "    Permite:\n",
        "      1. Introducir una nueva hora.\n",
        "      2. Ver la hora actual.\n",
        "      3. Crear una hora a partir de una cadena.\n",
        "      4. Salir del programa.\n",
        "    \"\"\"\n",
        "    current_time = Time()\n",
        "\n",
        "    while True:\n",
        "        print(\"\\n--- MENÚ ---\")\n",
        "        print(\"1. Introducir una nueva hora\")\n",
        "        print(\"2. Ver hora actual\")\n",
        "        print(\"3. Crear hora desde una cadena\")\n",
        "        print(\"4. Salir\")\n",
        "\n",
        "        opcion = input(\"Elige una opción (1-4): \").strip()\n",
        "\n",
        "        if opcion == \"1\":\n",
        "            try:\n",
        "                fmt_in = input(\"Formato (AM, PM o 24 HOURS): \").strip()\n",
        "                if not Time.is_valid_format(fmt_in):\n",
        "                    print(\"Formato inválido. Usa AM, PM o 24 HOURS.\")\n",
        "                    continue\n",
        "\n",
        "                if fmt_in.upper() == \"24 HOURS\" or fmt_in.upper() in (\"24H\", \"24HOURS\"):\n",
        "                    h_min, h_max = 0, 23\n",
        "                else:\n",
        "                    h_min, h_max = 1, 12\n",
        "\n",
        "                h = input_int(f\"Horas ({h_min}-{h_max}): \", h_min, h_max)\n",
        "                m = input_int(\"Minutos (0-59): \", 0, 59)\n",
        "                s = input_int(\"Segundos (0-59): \", 0, 59)\n",
        "\n",
        "                if current_time.set_time(h, m, s, fmt_in):\n",
        "                    print(\"Hora asignada correctamente.\")\n",
        "                else:\n",
        "                    print(\"No se pudo asignar la hora. Verifica los valores.\")\n",
        "            except ValueError as e:\n",
        "                print(f\"Error: {e}\")\n",
        "\n",
        "        elif opcion == \"2\":\n",
        "            print(\"Hora actual:\")\n",
        "            print(format_time_string(current_time))\n",
        "            print(f\"Objetos Time creados: {Time.get_time_count()}\")\n",
        "\n",
        "        elif opcion == \"3\":\n",
        "            s = input(\"Introduce la cadena (ej: '14:30:00 24 HOURS' o '02:45:30 PM'): \").strip()\n",
        "            obj = Time.from_string(s)\n",
        "            if obj is not None:\n",
        "                current_time = obj\n",
        "                print(\"Hora creada correctamente:\")\n",
        "                print(format_time_string(current_time))\n",
        "            else:\n",
        "                print(\"No se pudo crear la hora desde la cadena.\")\n",
        "\n",
        "        elif opcion == \"4\":\n",
        "            print(\"Saliendo del programa... ¡Hasta luego!\")\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print(\"Opción inválida. Prueba con 1, 2, 3 o 4.\")\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n",
        "\n"
      ]
    }
  ]
}